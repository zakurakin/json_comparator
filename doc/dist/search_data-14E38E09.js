searchData={"items":[{"type":"module","title":"JsonComparator","doc":"Provides functionality for comparing JSON structures with configurable comparison options.","ref":"JsonComparator.html"},{"type":"module","title":"Examples - JsonComparator","doc":"iex> map1 = %{a: 1, b: 2, c: %{d: 3, e: 4}}\n    iex> map2 = %{a: 1, b: 5, c: %{d: 6}}\n    iex> {:error, differences} = JsonComparator.compare_all(map1, map2)\n    iex> Enum.map(differences, fn {path, _} -> path end) |> Enum.sort()\n    [\"b\", \"c.d\", \"c.e\"]\n\n    # No differences\n    iex> JsonComparator.compare_all(%{a: 1}, %{a: 1})\n    :ok","ref":"JsonComparator.html#module-examples"},{"type":"function","title":"JsonComparator.compare/3","doc":"Compares two JSON structures for equality with configurable options.\n\nThis function performs a deep comparison of two JSON structures, supporting various data types\nincluding maps, lists, DateTime objects, and structs. It provides configurable behavior for\nlist comparison and DateTime precision.\n\nBy default, this function stops and returns on the first difference found.\nUse the `deep_compare: true` option to collect all differences.","ref":"JsonComparator.html#compare/3"},{"type":"function","title":"Parameters - JsonComparator.compare/3","doc":"* `json1` - First JSON structure to compare\n  * `json2` - Second JSON structure to compare\n  * `opts` - Optional keyword list of comparison options:\n    * `:strict_list_order` - When `true`, lists must have identical order to be considered equal.\n      Defaults to `false`\n    * `:truncate_datetime_microseconds` - When `true`, DateTime comparisons ignore microseconds.\n      Defaults to `true`\n    * `:error_message` - Custom error message template to use when differences are found.\n      The string `%{path}` will be replaced with the path where the difference was found.\n      Defaults to \"Submitted JSONs do not match: %{path}\"\n    * `:deep_compare` - When `true`, collects all differences instead of stopping at the first one.\n      Defaults to `false`. When `true`, returns `{:error, differences}` where `differences` is a list\n      of `{path, details}` tuples.","ref":"JsonComparator.html#compare/3-parameters"},{"type":"function","title":"Returns - JsonComparator.compare/3","doc":"* `:ok` - When the structures are equal according to the comparison rules\n  * `{:error, message}` - When differences are found and `deep_compare: false`, where message is a\n     string indicating the path where the first difference was encountered\n  * `{:error, differences}` - When differences are found and `deep_compare: true`, where differences\n     is a list of tuples containing path and details about each difference","ref":"JsonComparator.html#compare/3-returns"},{"type":"function","title":"Examples - JsonComparator.compare/3","doc":"# Basic comparison (stops at first difference)\n    iex> JsonComparator.compare(%{a: 1, b: 2}, %{a: 1, b: 2})\n    :ok\n\n    iex> JsonComparator.compare(%{a: 1, b: 2}, %{a: 1, b: 3})\n    {:error, \"Submitted JSONs do not match: b\"}\n\n    # Unordered list comparison (default behavior)\n    iex> JsonComparator.compare([1, 2, 3], [3, 2, 1])\n    :ok\n\n    # Ordered list comparison\n    iex> JsonComparator.compare([1, 2, 3], [1, 2, 3], strict_list_order: true)\n    :ok\n\n    # Custom error message\n    iex> JsonComparator.compare(%{a: 1}, %{a: 2}, error_message: \"Values differ at: %{path}\")\n    {:error, \"Values differ at: a\"}\n\n    # Deep comparison (collect all differences)\n    iex> map1 = %{a: 1, b: 2, c: 3, d: %{e: 4, f: 5}}\n    iex> map2 = %{a: 1, b: 7, d: %{e: 9, g: 8}, h: 10}\n    iex> {:error, differences} = JsonComparator.compare(map1, map2, deep_compare: true)\n    iex> length(differences)\n    6\n\n    # Processing all differences\n    iex> map1 = %{a: 1, b: 2, c: 3}\n    iex> map2 = %{a: 1, b: 5}\n    iex> {:error, diffs} = JsonComparator.compare(map1, map2, deep_compare: true) |> IO.inspect(label: \"---- Result ----\", limit: :infinity)\n    {:error,\n    [\n      {\"c\", %{type: :missing_key, actual: nil, expected: 3}},\n      {\"b\", %{type: :value_mismatch, actual: 5, expected: 2}}\n    ]}","ref":"JsonComparator.html#compare/3-examples"}],"proglang":"elixir","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.2"}}